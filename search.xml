<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[java内部类]]></title>
    <url>%2Fposts%2Fjava%2F2019-01-19-java%E5%86%85%E9%83%A8%E7%B1%BB.html</url>
    <content type="text"><![CDATA[Java 语言中可以定义一个静态类吗？ 答案是显而易见的：YES ，Java 语言存在静态类。 我们都知道，Java 语言中存在 静态变量 、存在 静态方法 、也存在 静态块。其实，Java 语言还存在 静态类。 Java 语言中的静态类Java 语言允许我们在一个类中定义另一个类。类中的类我们称之为嵌套类。而包含嵌套类的类，我们则称之为 外部类。 Java 语言中，我们不能定义顶级的外部静态类。但我们可以定义静态的内部嵌套类。 也就是说，我们不能定义下面这中形式的静态类 123public static class JavaTester&#123;&#125; 当我们可以在类中定义一个静态的嵌套类，比如 123456public class JavaTester&#123; static class NestedStaticClass &#123; &#125;&#125; 那么，你会不会有另一个疑问：静态和非静态的嵌套类有什么区别呢 ？ 对了，忘记说了，非静态嵌套类也被称为内部类 静态和非静态的嵌套类的区别静态嵌套类和非静态嵌套类的区别好多条，我们陈述下几个主要的区别： 静态嵌套类使用时并不需要引用外部类。但非静态嵌套类 (内部类) 则必须引用外部类。 非静态嵌套类(内部类) 可以访问外部类的静态和非静态成员。但静态嵌套类只能访问到外部类的静态成员，不可以访问外部类的非静态成员（实例成员）。 非静态嵌套类(内部类) 不能单独实例化。必须先实例化外部类，才能实例化内部类。内部类可以引用外部类的数据和方法。因此，我们并不需要将外部类的引用传递给内部类的构造方法。这种机制，使得内部类更加简单明了。 范例我们写一个范例来演示下静态嵌套类和非静态嵌套类的区别 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051package com.noblelift.imp.products.mes.service.ifs.wcs;public class JavaTester&#123; private static String msg = "简单教程，简单编程"; // 静态嵌套类 public static class NestedStaticClass&#123; // 静态嵌套类只能访问外部类的静态成员 public void printMessage() &#123; // 如果将 msg 变量设为非静态的，则下面的语句会报错 System.out.println("Message from nested static class: " + msg); &#125; &#125; // 非静态嵌套类，也称之为内部类 public class InnerClass&#123; // 嵌套类可以访问外部类的静态和非静态成员 public void display()&#123; System.out.println("Message from non-static nested class: "+ msg); &#125; &#125; // 如何创建静态嵌套类和内部类的实例？ public static void main(String args[])&#123; // 创建一个静态嵌套类的实例 JavaTester.NestedStaticClass printer = new JavaTester.NestedStaticClass(); // 调用静态嵌套类的成员方法 printer.printMessage(); // 为了创建一个内部类的实例，我们必须先创建一个外部类的实例 // 然后再创建内部类的时候 JavaTester outer = new JavaTester(); JavaTester.InnerClass inner = outer.new InnerClass(); // 调用内部类的非静态成员 inner.display(); // 我们可以将上面的两步合并为一步 JavaTester.InnerClass innerObject = new JavaTester().new InnerClass(); // 现在，我们可以调用内部类的方法 innerObject.display(); &#125; &#125; 参考链接JAVA静态类]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>static</tag>
        <tag>内部类</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java对象头与锁的升级]]></title>
    <url>%2Fposts%2Fjava%2F2019-01-18-java%E5%AF%B9%E8%B1%A1%E5%A4%B4.html</url>
    <content type="text"><![CDATA[Java对象保存在内存中时，由以下三部分组成： 对象头 实例数据 对齐填充字节 对象头java的对象头由以下三部分组成： Mark Word 指向类的指针 数组长度（只有数组对象才有） Mark Word作用：存储对象自身的运行时数据 如哈希码(HashCode)、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等。这部分数据长度在32位和63位的虚拟机中分别为32bit和64bit，官方称它为”Makr Word”。对象要存储的运行时数据很多，其实已超出32位、64位Bitmap结构所以记录的限度，但对象头信息是与对象自身定义的数据无关的额外存储成本，考虑到虚拟机的空间效率，Mark Word被设计成一个非固定的数据结构以便在极小的空间内存储尽量多的信息。它会根据对象状态复用自己的存储空间。 Mark Word记录了对象和锁有关的信息，当这个对象被synchronized关键字当成同步锁时，围绕这个锁的一系列操作都和Mark Word有关。 Mark Word在32位JVM中的长度是32bit，在64位JVM中长度是64bit。 Mark Word在不同的锁状态下存储的内容不同，在32位JVM中是这么存的。 其中无锁和偏向锁的锁标志位都是01，只是在前面的1bit区分了这是无锁状态还是偏向锁状态。 JDK1.6以后的版本在处理同步锁时存在锁升级的概念，JVM对于同步锁的处理是从偏向锁开始的，随着竞争越来越激烈，处理方式从偏向锁升级到轻量级锁，最终升级到重量级锁。 JVM一般是这样使用锁和Mark Word的： 1，当没有被当成锁时，这就是一个普通的对象，Mark Word记录对象的HashCode，锁标志位是01，是否偏向锁那一位是0。 2，当对象被当做同步锁并有一个线程A抢到了锁时，锁标志位还是01，但是否偏向锁那一位改成1，前23bit记录抢到锁的线程id，表示进入偏向锁状态。 3，当线程A再次试图来获得锁时，JVM发现同步锁对象的标志位是01，是否偏向锁是1，也就是偏向状态，Mark Word中记录的线程id就是线程A自己的id，表示线程A已经获得了这个偏向锁，可以执行同步锁的代码。 4，当线程B试图获得这个锁时，JVM发现同步锁处于偏向状态，但是Mark Word中的线程id记录的不是B，那么线程B会先用CAS操作试图获得锁，这里的获得锁操作是有可能成功的，因为线程A一般不会自动释放偏向锁。如果抢锁成功，就把Mark Word里的线程id改为线程B的id，代表线程B获得了这个偏向锁，可以执行同步锁代码。如果抢锁失败，则继续执行步骤5。 5，偏向锁状态抢锁失败，代表当前锁有一定的竞争，偏向锁将升级为轻量级锁。JVM会在当前线程的线程栈中开辟一块单独的空间，里面保存指向对象锁Mark Word的指针，同时在对象锁Mark Word中保存指向这片空间的指针。上述两个保存操作都是CAS操作，如果保存成功，代表线程抢到了同步锁，就把Mark Word中的锁标志位改成00，可以执行同步锁代码。如果保存失败，表示抢锁失败，竞争太激烈，继续执行步骤6。 6，轻量级锁抢锁失败，JVM会使用自旋锁，自旋锁不是一个锁状态，只是代表不断的重试，尝试抢锁。从JDK1.7开始，自旋锁默认启用，自旋次数由JVM决定。如果抢锁成功则执行同步锁代码，如果失败则继续执行步骤7。 7，自旋锁重试之后如果抢锁依然失败，同步锁会升级至重量级锁，锁标志位改为10。在这个状态下，未抢到锁的线程都会被阻塞。 指向类的指针该指针在32位JVM中的长度是32bit，在64位JVM中的长度是64bit Java对象的类数据保存在方法区 数组长度只有数组对象保存了这部分数据。该数据在32位和64位JVM中长度都是32bit。 实例数据对象的实例数据就是在java代码中能看到的属性和他们的值。 对齐填充字节因为JVM要求java的对象占的内存大小应该是8bit的倍数，所以后面有几个字节用于把对象的大小补齐至8bit的倍数，没有特别的功能。 参考链接Java虚拟机中对象探秘–对象头创建、对象头、对象锁、synchoronized底层实现 Java的对象头 深入理解Java并发之synchronized实现原理 JAVA并发-Monitor简介 Monitor（管程）是什么意思？Java中Monitor（管程）的介绍 Java锁和监视器]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>锁</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[junit测试Spring]]></title>
    <url>%2Fposts%2Fspring%2F2019-01-16-junit%E6%B5%8B%E8%AF%95Spring.html</url>
    <content type="text"><![CDATA[在app.xml中配置 1&lt;bean name=&quot;date&quot; class=&quot;java.util.Date&quot;/&gt; 测试类 12345678910@RunWith(SpringJUnit4ClassRunner.class)@ContextConfiguration(locations = &#123; "classpath:applicationContext.xml" &#125;)public class MyTest &#123; @Autowired Date date; @Test public void hehe() &#123; System.out.println(date.toLocaleString()); &#125;&#125;]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>测试</tag>
        <tag>junit</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring常用注解]]></title>
    <url>%2Fposts%2Fspring%2F2019-01-16-Spring%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3.html</url>
    <content type="text"><![CDATA[@Configuration spring注解开发AnnotationConfigApplicationContext的使用]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>注解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring配置数据库方式]]></title>
    <url>%2Fposts%2FSpring%2F2019-01-15-Spring%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E5%BA%93%E6%96%B9%E5%BC%8F.html</url>
    <content type="text"><![CDATA[Spring中提供了多种不同形式的数据源配置方式 Spring自带的数据源(DriverMangerDataSource) DBCP数据源 C3P0数据源 Druid数据源 JNDI数据源 所有数据源的jar包下载地址1下载地址2 下面简单介绍4种配置方式 DriverMangerDataSource :说明：DriverManagerDataSource建立连接是只要能建立连接就新建一个connection，根本没有连接池的概念。 1234567//id可以随便命名，如dataSource&lt;bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"&gt; &lt;property name="driverClassName" value="com.mysql.jdbc.Driver" /&gt; &lt;property name="url" value="jdbc:mysql://localhost:3306/dbname" /&gt; &lt;property name="username" value="root" /&gt; &lt;property name="password" value="123456" /&gt;&lt;/bean&gt; DBCP DBCP的配置依赖于2个jar包commons-dbcp.jar，commons-pool.jar。 123456&lt;bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"&gt; &lt;property name="driverClassName" value="com.mysql.jdbc.Driver" /&gt; &lt;property name="url" value="jdbc:mysql://localhost:3306/dbname" /&gt; &lt;property name="username" value="root" /&gt; &lt;property name="password" value="123456" /&gt;&lt;/bean&gt; C3P0数据源 C3P0是一个开放源代码的JDBC数据源实现项目，C3P0依赖于jar包c3p0.jar。 123456789&lt;bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close"&gt; &lt;!-- c3p0这个地方叫driverClassName --&gt; &lt;property name="driverClass" value="com.mysql.jdbc.Driver" /&gt; &lt;!-- c3p0这个地方叫url--&gt; &lt;property name="jdbcUrl" value="jdbc:mysql://localhost:3306/dbname" /&gt; &lt;!-- c3p0这个地方叫username--&gt; &lt;property name="user" value="root" /&gt; &lt;property name="password" value="123456" /&gt;&lt;/bean&gt; Druid数据源123456&lt;bean id=&quot;dataSource&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot; destroy-method=&quot;close&quot;&gt; &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt; &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/dbname&quot; /&gt; &lt;property name=&quot;username&quot; value=&quot;root&quot; /&gt; &lt;property name=&quot;password&quot; value=&quot;123456&quot; /&gt;&lt;/bean&gt; JNDI数据源的配置 参考链接几种数据源区别 Spring配置数据源的格式 Druid的Github地址 dbcp配置-官方文档中文版 DBCP连接池配置]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据库驱动和url格式]]></title>
    <url>%2Fposts%2F%E6%95%B0%E6%8D%AE%E5%BA%93%2F2019-01-15-%E6%95%B0%E6%8D%AE%E5%BA%93%E9%A9%B1%E5%8A%A8%E5%92%8Curl%E6%A0%BC%E5%BC%8F.html</url>
    <content type="text"><![CDATA[Oracle驱动：oracle.jdbc.driver.OracleDriver URL：jdbc:oracle:thin:@localhost:1521:dbname mysql驱动：com.mysql.jdbc.Driver URL：jdbc:mysql://localhost:3306/dbname SQL Server驱动：com.microsoft.jdbc.sqlserver.SQLServerDriver URL：jdbc:mirosoft:sqlserver://&lt;:1433&gt;;DatabaseName= DB2驱动：com.ibm.db2.jdbc.app.DB2Driver URL：jdbc：db2://&lt;:5000&gt;/dbname]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>mysql</tag>
        <tag>oracle</tag>
        <tag>sqlserver</tag>
        <tag>db2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CAS之ABA问题]]></title>
    <url>%2Fposts%2F%E5%B9%B6%E5%8F%91%2F2019-01-14-CAS%E4%B9%8BABA%E9%97%AE%E9%A2%98.html</url>
    <content type="text"><![CDATA[CAS简介CAS: Compare and Swap,比较并交换 java.util.concurrent包中借助CAS实现了区别于synchronous同步锁的一种乐观锁，使用这些类在多核CPU的机器上会有比较好的性能 CAS有3个操作，内存值V，旧的预期值A，要修改的新值B。当且仅当预期值A和内存值V相同时，将内存值V修改为B，否则什么都不做. 代码示例1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162public class ABA &#123; private static AtomicInteger atomicInt = new AtomicInteger(100); private static AtomicStampedReference atomicStampedRef = new AtomicStampedReference(100, 0); public static void main(String[] args) throws InterruptedException &#123; Thread intT1 = new Thread(new Runnable() &#123; @Override public void run() &#123; //compareAndSet为原子操作方法A=100,B=101 atomicInt.compareAndSet(100, 101); atomicInt.compareAndSet(101, 100); &#125; &#125;); Thread intT2 = new Thread(new Runnable() &#123; @Override public void run() &#123; try &#123; TimeUnit.SECONDS.sleep(1); &#125; catch (InterruptedException e) &#123; &#125; boolean c3 = atomicInt.compareAndSet(100, 101); System.out.println(c3); // true &#125; &#125;); intT1.start(); intT2.start(); intT1.join(); intT2.join(); Thread refT1 = new Thread(new Runnable() &#123; @Override public void run() &#123; try &#123; //休息1秒，让别的线程修改V的值 TimeUnit.SECONDS.sleep(1); &#125; catch (InterruptedException e) &#123; &#125; atomicStampedRef.compareAndSet(100, 101, atomicStampedRef.getStamp(), atomicStampedRef.getStamp() + 1); atomicStampedRef.compareAndSet(101, 100, atomicStampedRef.getStamp(), atomicStampedRef.getStamp() + 1); &#125; &#125;); Thread refT2 = new Thread(new Runnable() &#123; @Override public void run() &#123; //拿到版本号 int stamp = atomicStampedRef.getStamp(); try &#123; //休眠2秒，让别的线程修改版本号 TimeUnit.SECONDS.sleep(2); &#125; catch (InterruptedException e) &#123; &#125; boolean c3 = atomicStampedRef.compareAndSet(100, 101, stamp, stamp + 1); System.out.println(c3); // false &#125; &#125;); refT1.start(); refT2.start(); &#125;&#125; 源码分析 AtomicInteger 123456789101112131415161718192021 // setup to use Unsafe.compareAndSwapInt for updates private static final Unsafe unsafe = Unsafe.getUnsafe(); //用来记录value本身在内存中的内存地址，这个记录，也主要是为了在更新操作在内存中找到value的位置，方便 比较。 private static final long valueOffset; //用来存储当前的值，声明为volatile，是为了保证在更新操作时，当前线程可以拿到value的最新的值(并发情 况下，value可能已经被其他线程更新了) private volatile int value;public final boolean compareAndSet(int expect, int update) &#123; //使用unsafe的本地方法，实现高效的硬件级别CAS return unsafe.compareAndSwapInt(this, valueOffset, expect, update); &#125; public final int getAndSet(int newValue) &#123; //自旋锁 for (;;) &#123; //获取在当前线程中的值 int current = get(); if (compareAndSet(current, newValue)) return current; &#125; &#125; AtomicStampedReference 123456789//比较设置 参数依次为：期望值 写入新值 期望时间戳 新时间戳public boolean compareAndSet(V expectedReference,V newReference,int expectedStamp,int newStamp)//获得当前对象引用public V getReference()//获得当前时间戳public int getStamp()//设置当前对象引用和时间戳public void set(V newReference, int newStamp) 参考链接AtomicInteger、Unsafe类、ABA问题 ava CAS 和ABA问题 什么是CAS机制？]]></content>
      <categories>
        <category>并发</category>
      </categories>
      <tags>
        <tag>CAS</tag>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[锁的分类]]></title>
    <url>%2Fposts%2Funcategorized%2F2019-01-14-%E9%94%81%E7%9A%84%E5%88%86%E7%B1%BB.html</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[线程通信]]></title>
    <url>%2Fposts%2F%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%2F2019-01-14-%E7%BA%BF%E7%A8%8B%E9%80%9A%E4%BF%A1.html</url>
    <content type="text"><![CDATA[数据通信方式单工单工数据传输只支持数据在一个方向上传输；在同一时间只有一方能接受或发送信息，不能实现双向通信，举例：电视，广播. 半双工半双工数据传输允许数据在两个方向上传输,但是,在某一时刻,只允许数据在一个方向上传输,它实际上是一种切换方向的单工通信；在同一时间只可以有一方接受或发送信息，可以实现双向通信。举例：对讲机。 全双工全双工数据通信允许数据同时在两个方向上传输,因此,全双工通信是两个单工通信方式的结合,它要求发送设备和接收设备都有独立的接收和发送能力；在同一时间可以同时接受和发送信息，实现双向通信，举例：电话通信 进程通信方式管道（pipe）管道是一种半双工的通信方式，数据只能单向流动，而且只能在具有血缘关系的进程间使用。进程的血缘关系通常指父子进程关系。管道分为pipe（无名管道）和fifo（命名管道）两种，有名管道也是半双工的通信方式，但是它允许无亲缘关系进程间通信。 信号量信号量是一个计数器，可以用来控制多个进程对共享资源的访问。它通常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段。 消息队列(message queue)消息队列是由消息组成的链表，存放在内核中 并由消息队列标识符标识。消息队列克服了信号传递信息少，管道只能承载无格式字节流以及缓冲区大小受限等缺点。消息队列与管道通信相比，其优势是对每个消息指定特定的消息类型，接收的时候不需要按照队列次序，而是可以根据自定义条件接收特定类型的消息。 信号（signal）信号是一种比较复杂的通信方式，用于通知接收进程某一事件已经发生。 共享内存(shard memory)共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问，共享内存是最快的IPC方式，它是针对其他进程间的通信方式运行效率低而专门设计的。它往往与其他通信机制，如信号量配合使用，来实现进程间的同步和通信。 套接字(socket)套接口也是一种进程间的通信机制，与其他通信机制不同的是它可以用于不同系统及其网络之间的进程通信。 线程通信锁机制 互斥锁：提供了以排它方式阻止数据结构被并发修改的方法。 读写锁：允许多个线程同时读共享数据，而对写操作互斥。 条件变量：可以以原子的方式阻塞进程，直到某个特定条件为真为止。对条件测试是在互斥锁的保护下进行的。条件变量始终与互斥锁一起使用。 信号量机制包括无名线程信号量与有名线程信号量 无名线程信号量 有名线程信号量 信号机制类似于进程间的信号处理。 线程间通信的主要目的是用于线程同步，所以线程没有象进程通信中用于数据交换的通信机制。 ###]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>线程</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[博客链接]]></title>
    <url>%2Fposts%2F%E9%9D%A2%E8%AF%95%2F2019-01-13-%E5%8D%9A%E5%AE%A2%E9%93%BE%E6%8E%A5.html</url>
    <content type="text"><![CDATA[消息队列]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>队列</tag>
        <tag>面试</tag>
        <tag>MQ</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo文章简单加密访问]]></title>
    <url>%2Fposts%2F%E5%8D%9A%E5%AE%A2%2F2019-01-13-Hexo%E6%96%87%E7%AB%A0%E7%AE%80%E5%8D%95%E5%8A%A0%E5%AF%86%E8%AE%BF%E9%97%AE.html</url>
    <content type="text"><![CDATA[Hexo文章简单加密访问测试]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo相关]]></title>
    <url>%2Fposts%2Funcategorized%2F2019-01-11-hexo%E7%9B%B8%E5%85%B3.html</url>
    <content type="text"><![CDATA[hexo相关设置 Hexo操作常用命令1npm install hexo-deployer-git #此时当前分支应显示为hexo 阅读全文在文章合适的位置添加&lt;!-- more --&gt;，Hexo推荐使用。 换电脑之后的操作 hexo系列问题之我们换了电脑怎么办 拉取代码后操作如下命令,该命令会自动安装Hexo相关依赖。 1npm install hexo-deployer-git #此时当前分支应显示为hexo 给主题next添加搜索功能 安装插件 1npm install hexo-generator-searchdb --save 修改配置文件 路径：/blog/themes/next下的_config.yml文件，进行编辑 12local_search: enable: true 修改主题next的默认宽度打开编辑`themes\next\source\css\_schemes\Pisces\_layout.styl`，在底部添加如下代码： 12345678910111213141516171819202122232425262728293031323334// 以下为新增代码！！header&#123; width: 75% !important; &#125;header.post-header &#123; width: auto !important;&#125;.container .main-inner &#123; width: 75%; &#125;.content-wrap &#123; width: calc(100% - 260px); &#125;.header &#123; +tablet() &#123; width: auto !important; &#125; +mobile() &#123; width: auto !important; &#125;&#125;.container .main-inner &#123; +tablet() &#123; width: auto !important; &#125; +mobile() &#123; width: auto !important; &#125;&#125;.content-wrap &#123; +tablet() &#123; width: 100% !important; &#125; +mobile() &#123; width: 100% !important; &#125;&#125; 常见问题hexo的表体无法渲染Markdown语法​ 在##后面加空格,如 1## 二级标题 推荐next主题博客hoxios asdfv simon96 xiaweizi 参考链接 2018最新版Hexo博客Next主题6.0配置优化 hexo的next主题个性化教程：打造炫酷网站 Next主题个性化设置 Hexo设置主题以及Next主题个性设置 Hexo文章简单加密访问 最全Hexo博客搭建 来必力评论设置]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux常用命令]]></title>
    <url>%2Fposts%2Funcategorized%2F2019-01-11-Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html</url>
    <content type="text"><![CDATA[本文记录Linux常用命令 1、删除文件 1rm -rf * #删除所有文件，隐藏文件不会删除]]></content>
      <tags>
        <tag>命令</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git常用命令]]></title>
    <url>%2Fposts%2Funcategorized%2F2019-01-11-git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html</url>
    <content type="text"><![CDATA[1、拉取远程代码 12git clone https://github.com/ldjWillow/ldjWillow.github.io.gitgit clone -b hexo https://github.com/yourname/ldjWillow.github.io.git 从分支 hexo上拉取代码 2、查看分分支 123git branch 查看本地分支git branch -r 查看远程分支git branch -a 查看所有分支(本地和远程) 3、创建分支 12git branch node0 创建一个名为node0的分支git push origin node0 创建远程分支（实际上把本地分支node0推送到远程，故node0分支必须在本地先创建） 4、切换分支 1git checkout node0 5、创建并切换分支 1git checkout -b node1 6、删除分支 12git branch -d node1 删除本地分支git push origin --delete node0 删除远程分支 7、拉取分支git pull 1234$ git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;$ git pull origin next:master 如果远程分支(next)要与当前分支合并，则冒号后面的部分可以省略。上面命令可以简写为： $ git pull origin next 8、放弃本地修改，强制更新 git fetch 只是下载远程的库的内容，不做任何的合并 git reset 把HEAD指向刚刚下载的最新的版本 12git fetch --allgit reset --hard origin/master 9、本地关联远程分支 12git branch --set-upstream-to=origin/remote_branch your_branchgit push --set-upstream origin hexo 10、添加(git add) git add all和git add .区别 git add -A 和 git add . 的区别 123git add readme.txt 提交单个文件git add readme.txt ant.txt 提交多个文件，用空格隔开git add *.html 提交所有html文件]]></content>
  </entry>
</search>
